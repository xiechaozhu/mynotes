//可以不定义字符数组，而定义一个字符指针。用字符指针指向字符串中的字符。
#include<stdio.h>
int main(){
    char *string="I love China!";
    printf("%s\n",string);
    return 0;
}
复制代码
在这里没有定义字符数组，在程序中定义了一个字符指针变量string，用字符串常量“I love China!"对它初始化。
C语言对字符串常量是按字符数组处理string的，在内存中开辟了一个字符数组用来存故该字符串常量。
对字符指针C变量string初始化，实际上是把字符串第1个元素的地址(即存放字符串的字符数组的首元素地址)赋string。
有人误认为皮，string是一个字符串变量，以为在定义时把“I love China!"这几个字符赋给该字符串变量，这是不对的。
定义string的部分:

char *string="I love China!"

等价于：

char *string;                                                                                                                                                                                                                                                string="I love China!";

void * string 这是输出的结果就是一个地址。

可以看到string被定义为一个指针变量，指向字符型数据，请注意它只能指向一个字符变量或其他字符类型数据,
不能同时指向多个字符数据,更不是把“I love China!"这些字符存放到string中(指针变量只能存放地址)，
也不是把字符串赋给* string。只是把“I love China!"的第1个字符的地址赋给指针变量string。

　　输出时用printf("%s\n",string);，%s是输出字符串时所用的格式符，在输出项中给出字符指针变量名string,
则系统先输出它所指向的一个字符数据，然后自动使string加1，使之指向下一个字符，然后再输出一个字符.....
如此直到遇到字符串结束标志'\0'为止。注意，在内存中，字符串的最后被自动加了一个‘\0'，
因此在输出时能确定字符串的终止位置。说明:通过字符数组名或字符指针变量可以输出一个字符串。而对一个数值型数组，是不能企图用数组名输出它的全部元素的。





  1 #include <stdio.h>
  2 #include <stdlib.h>
  3 struct TEST{
  4     int a;
  5     char * b;
  6 };
  7 
  8 int main(void)
  9 {
 10     struct TEST * t;
 11     t=(struct TEST *)malloc(sizeof(struct TEST *));//结构体指针使用前必须初始化。内部的指针也必须初始化。
 12     t->a=1;
 13 
 14     t->b="helloworld";//这里的b本来也要初始化的，但是这里给b赋值了，所以就已经初始化了。
 15     printf("%d\n",t->a);
 16     printf("%s\n",t->b);
 17 }


